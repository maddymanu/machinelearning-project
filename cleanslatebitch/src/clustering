from Framework.DataSet import *

from pylab import *
from scipy.io import loadmat
from toolbox_02450 import clusterplot
from sklearn.mixture import GMM

crime = DataSet(datafile='../data/raw.csv', nominals=['state','communityname','countyCode','communityCode'])

#crime = crime.drop(['state', 'communityname']) 	  # Drop strings
#crime = crime.drop(['countyCode','communityCode']) # Drop nominals
crime = crime.drop_columns([
	'fold',
	'murders', 'murdPerPop',
	'rapes', 'rapesPerPop',
	'robberies', 'robbbPerPop',
#	'assaults', 'assaultPerPop',
	'burglaries', 'burglPerPop',
	'larcenies', 'larcPerPop',
	'autoTheft', 'autoTheftPerPop',
	'arsons', 'arsonsPerPop',
	'ViolentCrimesPerPop',
	'nonViolPerPop',
])
crime = crime.normalize()
crime = crime.fix_missing(fill_mean=True)
crime = crime.drop_nominals()
#crime = crime.discretize('assaults', 3)

#print(crime.df.assaults)
#print(crime.attributeNames)


# Variables of interest
N, M = crime.N, crime.M
#C = len(crime.classNames)
X = crime.X

# Number of clusters
K = 4
cov_type = 'diag'       # type of covariance, you can try out 'diag' as well
reps = 1                # number of fits with different initalizations, best result will be kept

# Fit Gaussian mixture model
gmm = GMM(n_components=K, covariance_type=cov_type, n_init=reps, params='wmc').fit(X)
cls = gmm.predict(X)    # extract cluster labels
print(cls)
cds = gmm.means_       # extract cluster centroids (means of gaussians)
print(cds)
covs = gmm.covars_      # extract cluster shapes (covariances of gaussians)

